{"meta":{"title":"Taeyeon","subtitle":"Taeyeon's blog","description":"Taeyeon's dev blog","author":"Taeyeon Kim","url":"https://taeyeonkim93.github.io","root":"/"},"pages":[{"title":"About me","date":"2019-09-11T12:43:47.000Z","updated":"2019-09-11T12:48:05.156Z","comments":true,"path":"about/index.html","permalink":"https://taeyeonkim93.github.io/about/index.html","excerpt":"","text":"김태연"}],"posts":[{"title":"[Kotlin] 코틀린 날짜 함수 정리","slug":"kotlin-calendar-function","date":"2019-09-17T06:59:06.000Z","updated":"2019-09-17T07:41:55.195Z","comments":true,"path":"2019/09/17/kotlin-calendar-function/","link":"","permalink":"https://taeyeonkim93.github.io/2019/09/17/kotlin-calendar-function/","excerpt":"","text":"코틀린 날짜 함수프로그래머스 문제를 풀다가 java에서는 Date가 Deprecate 되고 Calendar를 사용한다고 해서 정리해봤다. 전체적으로 정리하기보단 실제로 사용하는 부분에만 중점을 뒀다. 전체 Document는 이곳 참조 java에서는 날짜를 계산하는 내장라이브러리로 Calendar클래스나 java.time 패키지를 주로 사용하지만 일단 사용하기 편한 Calendar 클래스를 보면 Calendar 인스턴스 생성1val calendar:Calendar = Calendar.getInstance() Calendar 클래스는 추상클래스이기 때문에 객체를 직접 생성할 수 없고 getInstance() 함수를 통해 완전히 구현된 클래스의 인스턴스를 얻어야 한다.이 인스턴스를 통해 Calendar 클래스 내부 함수들을 사용할 수 있다. 인스턴스의 내부에는 현재 날짜와 시간정보가 들어있다. 현재 날짜정보 가져오기123456val year = calendar.get(Calendar.YEAR) val mon = calendar.get(Calendar.MONTH) val day = calendar.get(Calendar.DAY\\_OF\\_MONTH) val hour = calendar.get(Calendar.HOUR\\_OF\\_DAY) val min = calendar.get(Calendar.MINUTE) val sec = calendar.get(Calendar.SECOND) 주의할 점은 calendar.get(Calendar.MONTH) 로 가져오는 월이 1~12이 아니라 0~11 이다.그래서 0이 1월, 11이 12월을 의미한다. 날짜 설정하기 1calendar.set(year,month,date,hour,minute,second) 날짜 일수 계산하기 12calendar.timeInMillis //설정된 시간을 밀리초로 변경 시간을 밀리초로 변환시킨 후SimpleDateFormat()함수를 통해 원하는 Date Format으로 변경한다.자세한 포맷은 정식문서 참조 결과값이 한글로 나올경우 뒤에 Locale.ENGLISH을 붙여 영어로 만든다. 12SimpleDateFormat(\"yyyy.MM.dd G 'at' HH:mm:ss z\",Locale.ENGLISH).format(calendar.timeInMillis) //2001.07.04 AD at 12:08:56 PDT","categories":[{"name":"Programming","slug":"Programming","permalink":"https://taeyeonkim93.github.io/categories/Programming/"},{"name":"Kotlin","slug":"Programming/Kotlin","permalink":"https://taeyeonkim93.github.io/categories/Programming/Kotlin/"}],"tags":[{"name":"CALENDAR","slug":"CALENDAR","permalink":"https://taeyeonkim93.github.io/tags/CALENDAR/"},{"name":"LIBRARY","slug":"LIBRARY","permalink":"https://taeyeonkim93.github.io/tags/LIBRARY/"},{"name":"JAVA","slug":"JAVA","permalink":"https://taeyeonkim93.github.io/tags/JAVA/"},{"name":"KOTLIN","slug":"KOTLIN","permalink":"https://taeyeonkim93.github.io/tags/KOTLIN/"},{"name":"날짜 함수","slug":"날짜-함수","permalink":"https://taeyeonkim93.github.io/tags/날짜-함수/"},{"name":"내장라이브러리","slug":"내장라이브러리","permalink":"https://taeyeonkim93.github.io/tags/내장라이브러리/"}]},{"title":"[프로그래머스] 코딩테스트 풀이 - 2016년","slug":"programmers-codding-test-1","date":"2019-09-17T06:34:03.000Z","updated":"2019-09-17T07:03:22.398Z","comments":true,"path":"2019/09/17/programmers-codding-test-1/","link":"","permalink":"https://taeyeonkim93.github.io/2019/09/17/programmers-codding-test-1/","excerpt":"","text":"문제 설명2016년 1월 1일은 금요일입니다. 2016년 a월 b일은 무슨 요일일까요?두 수 a ,b를 입력받아 2016년 a월 b일이 무슨 요일인지 리턴하는 함수, solution을 완성하세요.요일의 이름은 일요일부터 토요일까지 각각 SUN,MON,TUE,WED,THU,FRI,SAT입니다.예를 들어 a=5, b=24라면 5월 24일은 화요일이므로 문자열 TUE를 반환하세요. 제한 조건2016년은 윤년입니다.2016년 a월 b일은 실제로 있는 날입니다. (13월 26일이나 2월 45일같은 날짜는 주어지지 않습니다) 입출력 예 a b result 5 24 TUE 풀이날짜 구하는 함수를 직접 만들경우 2016년의 모든 달(1월~12월)의 마지막 날을 적는다. 12val month = listOf(31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31) // 1월~12월의 전체 날짜 수 2016년 1월 1일이 무슨일인지 알아낸다. (금요일) 금요일부터 목요일까지 영어로 적혀있는 배열을 만든다. 12val dayOfWeek = listOf(\"FRI\", \"SAT\", \"SUN\", \"MON\", \"TUE\", \"WED\", \"THU\")// 1월 1일부터 반복되는 요일 영어 1월 1일이라면 (0 + 1 - 1) % 7 = 0 -&gt; FRI3월 6일이라면 (31 + 29 + 6 - 1) % 7 = 2 -&gt; SUN숫자로 계산한 후 dayOfWeek에서 대응하는 날짜를 찾아 변환한다.123456for (i in 0 until a - 1) &#123; total += month[i] // 날짜 계산식&#125; total += (b-1) return dayOfWeek[total%7] // 요일 산출 내장 라이브러리를 사용해서 만들경우 월, 일을 날짜 변수에 넣는다 12val calendar = Calendar.getInstance() calendar.set(2016, a-1, b) 현재 날짜를 밀리초 단위로 변경한 후, 반환값이 날짜 포맷으로 출력되는 함수 SimpleDateFormat을 활용해서 영어단어로 출력한다. 12return SimpleDateFormat(\"EEE\", Locale.ENGLISH).format(calendar.timeInMillis).toUpperCase() // 밀리초단위로 변경 후 SimpleDateFormat으로 요일 출력 해당 내장함수에 대한 설명은 타 포스팅 참조 Kotlin 날짜함수 정리 전체 답안 12345678910import java.text.SimpleDateFormat import java.util.* class Solution &#123; fun solution(a: Int, b: Int): String &#123; val calendar = Calendar.getInstance() calendar.set(2016, a-1, b) return SimpleDateFormat(\"EEE\", Locale.ENGLISH).format(calendar.timeInMillis).toUpperCase() &#125; &#125;","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://taeyeonkim93.github.io/categories/Algorithm/"},{"name":"프로그래머스","slug":"Algorithm/프로그래머스","permalink":"https://taeyeonkim93.github.io/categories/Algorithm/프로그래머스/"}],"tags":[{"name":"KOTLIN","slug":"KOTLIN","permalink":"https://taeyeonkim93.github.io/tags/KOTLIN/"},{"name":"2016년","slug":"2016년","permalink":"https://taeyeonkim93.github.io/tags/2016년/"},{"name":"ALGORITHM","slug":"ALGORITHM","permalink":"https://taeyeonkim93.github.io/tags/ALGORITHM/"},{"name":"DATE LIBRARY","slug":"DATE-LIBRARY","permalink":"https://taeyeonkim93.github.io/tags/DATE-LIBRARY/"},{"name":"프로그래머스","slug":"프로그래머스","permalink":"https://taeyeonkim93.github.io/tags/프로그래머스/"}]},{"title":"[VCS] Github에서 실수로 Push한 Commit 삭제하기","slug":"github-commit-remove","date":"2019-09-17T06:18:50.000Z","updated":"2019-09-17T06:24:46.033Z","comments":true,"path":"2019/09/17/github-commit-remove/","link":"","permalink":"https://taeyeonkim93.github.io/2019/09/17/github-commit-remove/","excerpt":"","text":"[VCS] Github에서 실수로 Push한 Commit 삭제하기Git 작업 시 오타가 났거나 올라가면 안되는 Commit을 Push 했을경우 어떻게 삭제해야 할까? - 지워야 하는 Commit 잘못된 커밋이 몇개나 있으면 가독성을 해치게 된다. 깔끔하게 삭제하고 새롭게 commit 내용을 추가해보자. 지워야하는 해당 폴더에 들어가서 git log로 내역이 잘 나오는지 확인하자. * Hexo를 사용하는 유저는 .deploy_git 폴더에서 작업해야함 - git log 화면 지워야할 내용을 확인했다면 삭제 명령어를 입력하자. 1git reset --hard HEAD~[지울 개수] reset은 현재 진행중인 최신 commit에서부터 아래로 [지울 개수] 만큼 삭제한다. commit 시점 되돌리기 관련 내용은 타 문서를 참고하면 좋다.개발 바보들의 놀이터 - [초보용] Git 되돌리기( Reset, Revert ) - 삭제화면 - 삭제 이후 git log 현재 local의 commit 상태는 그대로 유지되니 올바른 내용의 commit을 한 후에 push를 진행하면 된다. 혹시 reset의 HEAD 숫자를 잘못입력해서 너무 많이 reset했을경우, git reflog를 사용해 몇번째 HEAD로 이동해야 하는지 살펴본다. 이동해야할 HEAD를 확인했으면 1git reset --hard HEAD@&#123;1&#125; 과 같이 강제로 되돌릴수 있다.","categories":[{"name":"etc","slug":"etc","permalink":"https://taeyeonkim93.github.io/categories/etc/"},{"name":"VCS","slug":"etc/VCS","permalink":"https://taeyeonkim93.github.io/categories/etc/VCS/"}],"tags":[{"name":"DOCUMENT","slug":"DOCUMENT","permalink":"https://taeyeonkim93.github.io/tags/DOCUMENT/"},{"name":"GIT","slug":"GIT","permalink":"https://taeyeonkim93.github.io/tags/GIT/"},{"name":"GITHUB","slug":"GITHUB","permalink":"https://taeyeonkim93.github.io/tags/GITHUB/"},{"name":"HEXO","slug":"HEXO","permalink":"https://taeyeonkim93.github.io/tags/HEXO/"},{"name":"RESET","slug":"RESET","permalink":"https://taeyeonkim93.github.io/tags/RESET/"},{"name":"VCS","slug":"VCS","permalink":"https://taeyeonkim93.github.io/tags/VCS/"}]},{"title":"[kotlin] 3. 함수형 프로그래밍","slug":"kotlin-study-3","date":"2019-09-15T10:29:05.000Z","updated":"2019-09-17T06:15:09.265Z","comments":true,"path":"2019/09/15/kotlin-study-3/","link":"","permalink":"https://taeyeonkim93.github.io/2019/09/15/kotlin-study-3/","excerpt":"","text":"References: Do it! 코틀린 프로그래밍 함수 구조123456package chap03.section1 fun sum(a: Int, b: Int): Int &#123; // fun 키워드 // 함수 이름 // 매개변수 // 반환자료형 명시 var sum = a + b // 함수 본문 return sum // 반환 &#125; 한줄로 단축도 가능하다 1fun sum(a: Int, b: Int): Int = a + b 코틀린 함수 특성함수는 스택 메모리에 저장된다.스택은 각 함수가 Frame단위로 적재된다.LIFO인 스택 구조상 Main() 함수의 프레임이 가장 바닥에 적재되고, 그위에 max()함수 등 호출되는 순서대로 적재된다. 1234567힙 영역 (낮은 주소) ↓ min()함수 Frame max()함수 Frame main()함수 Frame ↑ 스택 영역(높은 주소) 함수는 스택 영역의 높은 주소부터 거꾸로 자라듯이 채워져 나간다.가장 나중에 호출된 min 함수가 가장 위로 올라가고, 호출이 종료되면 Frame단위로 사라진다.함수 내부의 변수들은 서로 겹치지않으므로 함수 내부의 변수들끼리 계산이 가능하다. Kotlin에서는 함수의 반환값을 생략할 수 있다.단, 함수의 반환값을 생략하고 함수를 작성하면 Unit이라는 특수한 자료형으로 반환된다. 123fun printSum(a: Int, b: Int): Unit &#123; //Unit은 없어도 상관없음 println(\"sum of $a and $b is $&#123;a + b&#125;\") &#125; 함수 내에서 여러개의 매개변수를 받을 때, 가변 인자를 사용하면 된다. 1234567891011fun main() &#123; normalVarargs(1,2,3,4) normalVarargs(4,5,6) &#125; fun normalVarargs(vararg counts: Int) &#123; // 가변인자 vararg for (num in counts) &#123; print(\"$num \") &#125; print(\"\\n\") &#125; 123실행결과1 2 3 4 4 5 6 variable argument, 가변 인자의 약자 vararg를 사용하면 그때그때 변하는 인자의 개수를 전부 매개변수로 받아 사용 할 수 있다. 함수형 프로그래밍 구조코틀린은 함수형 프로그래밍과 객체지향형 프로그래밍을 모두 지원하는 다중 패러다임 언어 이다. 다중 패러다임 언어 : 한가지 구현 규칙에 얽매이지 않고 다양한 문법과 형식을 지원하는 언어 함수형 프로그래밍?함수형 프로그래밍의 정의와 특징 순수 함수를 사용해야 한다. 람다식을 사용할 수 있다. 고차 함수를 사용할 수 있다. 1. 순수함수함수형 프로그래밍은 순수 함수를 작성하여 프로그램의 부작용을 줄이는 프로그래밍 기법을 말한다. 순수 함수의 조건 같은 인자에 대하여 항상 같은 값을 반환하는 함수 함수 외부의 어떤 상태도 바꾸지 않는 함수 1234순수 함수의 예 fun sum(a: Int, b: Int): Int &#123; return a + b &#125; 123456순수 함수를 만족하지 않는 함수의 예 fun check() &#123; val test = User.grade() if (test != null) process(test) // test는 User.grade()의 상태에 따라 달라짐 &#125; 2. 람다식람다식은 다음과 같은 형태로 이루어져있다. { x, y -&gt; x + y } 함수의 이름이 없고, 화살표(-&gt;)가 사용되었다. 함수형 프로그래밍의 람다식은 다음과 같은것을 말한다. 다른 함수의 인자로 넘기는 함수 함수의 결과값으로 반환되는 함수 변수에 저장하는 함수 람다식 예시 1234567891011121314변수에 할당하는 람다식 //// 같은 람다식 //// val multi: (Int, Int) -&gt; Int = &#123;x: Int, y: Int, Int -&gt; x * y&#125; val multi = &#123;x: Int, y: Int -&gt; x * y&#125; val multi: (Int, Int) -&gt; Int = &#123;x, y -&gt; x * y&#125; //// 같은 람다식 //// val multi = &#123;x,y -&gt; x * y&#125; // 이건 오류 (자료형이 없음) val greet: () -&gt; Unit = &#123;println(\"Hello World!\")&#125; // 반환값이 없을때 val square: (Int) -&gt; Int = &#123;x -&gt; x * x&#125; // 매개변수가 하나일때 val nestedLambda: () -&gt; () -&gt; Unit = &#123;&#123;println(\"nested\")&#125;&#125; // 람다식 안에 람다식 사용할경우 함수처럼 multi(x,y)로 사용하면 된다. 3. 일급 객체함수형 프로그래밍에서는 함수를 “일급 객체” 로 생각한다. 일급 객체의 특징은 다음과 같다. 일급 객체는 함수의 인자로 전달할 수 있다. 일급 객체는 함수의 반환값에 사용할 수 있다. 일급 객체는 변수에 담을 수 있다. 함수가 일급 객체면 일급 함수라고 부른다.일급 함수에 이름이 없는 경우 람다식 함수 혹은 람다식이라고 부를 수 있다즉 람다식은 일급 객체의 특징을 가진 이름 없는 함수이다. 4. 고차 함수고차 함수 란 다른 함수를 인자로 사용하거나 함수를 결과값으로 반환하는 함수를 말한다. 인자가 일반 함수인 고차 함수 예시 1234567891011인자가 일반 함수인 고차 함수 fun main() &#123; val res1 = sum(3,2) val res2 = mul(sum(3,3),3) // 인자에 함수 사용 println(\"res1: $res1, res2: $res2\") &#125; fun sum(a:Int, b:Int) = a + b fun mul(a:Int, b:Int) = a * b 12실행 결과 res1: 5, res2: 18 반환값이 일반 함수인 고차 함수 예시 1234567891011반환값이 일반 함수인 고차 함수 fun main() &#123; println(\"funcFunc: $&#123;funcFunc()&#125;\") &#125; fun sum(a:Int, b:Int) = a + b fun funcFunc():Int &#123; return sum(2,2) // 반환값이 함수 &#125; 12실행 결과 funcFunc: 4 람다식을 매개변수에 할당하는 고차함수 예시 123456789101112람다식을 매개변수에 할당하는 고차함수 fun main() &#123; var result: Int result = highOrder(&#123; x, y -&gt; x + y&#125;, 10,20) // 람다식 함수 호출 println(result) &#125; fun highOrder(sum: (Int, Int) -&gt; Int, a: Int, b: Int): Int &#123; // 매개변수에 삽입된 람다식 return sum(a,b) &#125; 12실행 결과 30 인자와 반환값이 없는 람다식 고차함수 예시 123456789인자와 반환값이 없는 람다식 고차함수fun main() &#123; val out: () -&gt; Unit = &#123;println(\"Hello World\")&#125; // -&gt; Unit 생략 가능 out() // 함수처럼 이용가능 val new = out // 다른 변수에 람다식 할당 가능 new() &#125; 123실행 결과 Hello World Hello World","categories":[{"name":"Programming","slug":"Programming","permalink":"https://taeyeonkim93.github.io/categories/Programming/"},{"name":"Kotlin","slug":"Programming/Kotlin","permalink":"https://taeyeonkim93.github.io/categories/Programming/Kotlin/"}],"tags":[{"name":"do it study","slug":"do-it-study","permalink":"https://taeyeonkim93.github.io/tags/do-it-study/"},{"name":"kotlin","slug":"kotlin","permalink":"https://taeyeonkim93.github.io/tags/kotlin/"}]},{"title":"[kotlin] 2. 코틀린 기초","slug":"kotlin-study-2","date":"2019-09-14T09:04:45.000Z","updated":"2019-09-16T03:26:20.715Z","comments":true,"path":"2019/09/14/kotlin-study-2/","link":"","permalink":"https://taeyeonkim93.github.io/2019/09/14/kotlin-study-2/","excerpt":"","text":"References: Do it! 코틀린 프로그래밍 프로젝트, 모듈, 패키지, 파일코틀린은 파일이 모여 패키지가 되고, 패키지가 모여 모듈이 된다.파이썬에서는 모듈이 모여 패키지가 되더니 언어마다 다른건가 싶다. 코틀린 프로젝트 계층 구조 1234# 프로젝트 ## 모듈 ### 패키지 #### 파일 패키지같은 프로젝트 내에서 같은 클래스 이름을 쓰더라도 오류가 나지 않게 패키지 이름으로 분류한다. 같은 프로젝트 내 Person 클래스 2개 -&gt; 충돌 발생 1번 패키지 내 Person 클래스 / 2번 패키지 내 Person 클래스 -&gt; 문제없음 패키지 이름을 선언하지 않고 파일을 만들면 default 패키지 아래로 자동으로 들어간다. - 보이지않는 default 패키지 아래에 존재하는 파일 패키지 명은 .으로 구분한다. 1com.example.edu 기능이나 역할을 뒤에 추가로 넣어주면 좋다. 1com.example.net.upload // 인터넷 업로드 기능을 하는 패키지명 다른 패키지 내 클래스 import 문법 및 클래스 객체로 만들기 123package com.taeyeon93.study.freetest2class Person(val name: String, val age:Int) // 클래스 선언 123456789package com.taeyeon93.study.freetest import com.taeyeon93.study.freetest2.Person // 클래스 import fun main() &#123; val user1 = Person(\"kildong\", 30) // 클래스 객체로 만들기 println(user1.name) println(user1.age)&#125; 123실행결과kildong30 다른 패키지 내의 클래스명과 현재 패키지의 클래스명이 같아서 객체를 만들기 어려울 때 as 별명을 붙여 구분한다. 1234import com.example.edu.Person as User fun main() &#123; val user1 = User(\"kildong\", 30) &#125; 변수/자료형변수변수는 val, var라는 키워드를 이용하여 선언한다. val : 변할 수 없는 상수 선언시 사용 / C,C++ 등에서는 const var : 일반적인 변수 코틀린은 자료형을 지정하지 않아도 자료형을 추론해서 알아서 자료형을 지정 할 수 있다. 12val username = \"Kildong\"// 코틀린이 자료형을 추론하여 username의 자료형을 String으로 결정 단, 자료형을 명시하지 않는 변수는 자료형을 추론할 수 있는 값을 지정해야 한다. 1var username // 자료형이 지정되지 않아 선언불가 변수에 커서를 대고 Ctrl+Shift+P를 누르면 추론된 자료형을 볼 수 있다. 쌍따옴표 내부에서 변수를 사용할때는 $ 특수문자를 붙여야 한다. 123456fun main()&#123; val number = 1234 println(number) println(\"$number\") &#125; 자료형코틀린의 자료형은 참조형 자료형을 사용한다. 기본형 자료형(Primitive Data Type) : int, long, float, double 등 참조형 자료형(Reference Type) : String, Date 등 참조형으로 선언한 변수는 코틀린 컴파일러에서 다시 기본형 자료형으로 대체되기 때문에 굳이 기본형을 신경쓸 필요가 없다. 언더스코어를 사용하면 자릿값을 구분할 수 있다. 123val number = 1_000_000val cardNum = 1234_1234_1234_1234L val hexVal = 0XAB_CD_EF_12 변수를 선언할때는 힙 영역에 실제 데이터를, 스택 영역에 주소값을 넣는다. 문자열 자료형은 동일한 문자열을 선언할 경우, 이미 힙 영역을 사용하고있는 문자열을 참조하는것이 효율적이므로이전에 선언한 힙 영역의 실제 데이터를 참조하는 주소값을 생성한다. 12345678910fun main() &#123; var str1: String = \"Hello\" var str2 = \"World\" var str3 = \"Hello\" // 동일한 Hello 라는 값을 선언한 경우 str1이 갖고있는 값의 주소값을 스택에 넣는다. println(\"str1 === str2: $&#123;str1 === str2&#125;\") println(\"str1 === str3: $&#123;str1 === str3&#125;\") // 주소값이 일치하므로 true&#125; 123실행결과 str1 === str2: falsestr1 === str3: true 코틀린은 아예 변수에 null을 허용하지 않아 NullPointerException 오류가 발생하지 않는다.그래서 코틀린에서 null을 허용하기위해서는 ? 기호를 이용해 선언해야 한다. null을 허용한 변수를 사용하기위해선 세이프 콜과 non-null 단정 기호를 사용해야 한다. 세이프 콜 : String? 과 같은 자료형은 변수 뒤에 ?. 을 붙여야 콜이 가능하다. non-null 단정기호 : 세이프콜과 같은 역할이며 !!. 을 붙여서 콜을 하지만, null에 대한 검증을 거치지 않아 컴파일은 가능하나 빌드중에 NPE 에러를 낸다. 12345fun main() &#123; var str1 : String? = \"Hello Kotlin\" str1 = null println(\"str1: $&#123;str1?.length&#125;\") // 세이프콜&#125; 12실행결과 str1 : null 12345fun main() &#123; var str1 : String? = \"Hello Kotlin\" str1 = null println(\"str1: $&#123;str1!!.length&#125;\") // non-null 단정기호&#125; 1234실행결과Exception in thread \"main\" kotlin.KotlinNullPointerException at chap02.section3.Sec3Kt.main(sec3.kt:6) at chap02.section3.Sec3Kt.main(sec3.kt) 엘비스 연산자를 이용하면 좀 더 안전하고 효율적으로 null을 허용한 변수를 사용할 수 있다.변수에 들어있는 값이 null일경우 반환값을 특정한 값으로 대체할 수 있다. 엘비스 연산자 : [?:] 왼쪽의 값이 null일 경우 오른쪽 값을 반환. 12345fun main() &#123; var str1 : String? = \"Hello Kotlin\" str1 = null println(\"str1: $str1 length: $&#123;str1?.length ?: -1&#125;\") // 엘비스 연산자 사용&#125; 12실행결과 str1: null length: -1 코틀린에서는 서로 다른 자료형의 변수를 비교하거나 연산할 수 없다.서로 다른 변수를 같은 자료형으로 직접 만들어야 연산할 수 있다.형변환은 toByte, toLong, toDouble 등을 통해서 변경한다. 어떤 변수가 정수일수도 있고 실수일 수도 있는 경우, 스마트 캐스트를 활용한다.일반적으로 처음 선언한 자료형은 뒤에 다른 자료형을 대입할 수 없지만, 스마트캐스트를 이용하면 가능하다.스마트캐스트는 Number, Any 등을 써서 다양하게 사용 할 수 있다. 12345678910111213fun main() &#123; var test: Number = 12.2 println(\"$test\") test = 12 println(\"$test\") test = 120L println(\"$test\") test += 12.0f println(\"$test\") &#125; 12345결과값 12.2 12 120 132.0 $변수.javaClass 를 사용하면 변수의 자료형을 얻을 수 있다.","categories":[{"name":"Programming","slug":"Programming","permalink":"https://taeyeonkim93.github.io/categories/Programming/"},{"name":"Kotlin","slug":"Programming/Kotlin","permalink":"https://taeyeonkim93.github.io/categories/Programming/Kotlin/"}],"tags":[{"name":"do it study","slug":"do-it-study","permalink":"https://taeyeonkim93.github.io/tags/do-it-study/"},{"name":"kotlin","slug":"kotlin","permalink":"https://taeyeonkim93.github.io/tags/kotlin/"}]},{"title":"[kotlin] 1. 코틀린 Hello World","slug":"kotlin-study-1","date":"2019-09-14T07:04:30.000Z","updated":"2019-09-14T08:57:20.367Z","comments":true,"path":"2019/09/14/kotlin-study-1/","link":"","permalink":"https://taeyeonkim93.github.io/2019/09/14/kotlin-study-1/","excerpt":"","text":"References: Do it! 코틀린 프로그래밍 코틀린 공부를 정리하는 포스팅 코틀린 언어의 장점 자료형 오류를 미리 검사한다. NPE(NullPointerException) 예방으로 인한 안정성이 향상된다. 간결하고 효율적이다. 함수형 프로그래밍, 객체지향 프로그래밍 모두 가능하다. 코틀린 환경 세팅 JVM 환경에서 실습을 진행하기위하여 JDK(Java Development Kit) 설치가 필요하므로OpenJDK 설치(안정적인 동작을 위해 Java 8 버전 설치), 환경변수 세팅 InteliJ IDE 설치 Hello World!코틀린 언어의 Hello World 출력법 123fun main(args: Array&lt;String&gt;) &#123; println(\"Hello Kotlin!\") &#125; 12실행결과Hello Kotlin! Ctrl + Shift + F10으로 빌드가 가능하다. 코틀린 코드는 main()메서드가 있는 파일 이름을 기준으로 JVM이 자동으로 클래스를 생성하므로 클래스를 명시하지 않아도 동작한다. 123456789101112내부에서 자동으로 생성된 코틀린의 클래스 (tools &gt; Kotlin &gt; show Kotlin Bytecode 혹은 우측 Kotlin Bytecode 클릭) public final class HelloKotlinKt &#123; // access flags 0x19 public final static main(\\[Ljava/lang/String;)V // annotable parameter count: 1 (visible) // annotable parameter count: 1 (invisible) @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0 ... ...","categories":[{"name":"Programming","slug":"Programming","permalink":"https://taeyeonkim93.github.io/categories/Programming/"},{"name":"Kotlin","slug":"Programming/Kotlin","permalink":"https://taeyeonkim93.github.io/categories/Programming/Kotlin/"}],"tags":[{"name":"do it study","slug":"do-it-study","permalink":"https://taeyeonkim93.github.io/tags/do-it-study/"},{"name":"kotlin","slug":"kotlin","permalink":"https://taeyeonkim93.github.io/tags/kotlin/"}]}]}